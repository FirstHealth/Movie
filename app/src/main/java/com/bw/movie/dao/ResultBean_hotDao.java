package com.bw.movie.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.bean.hot.ResultBean_hot;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT_BEAN_HOT".
*/
public class ResultBean_hotDao extends AbstractDao<ResultBean_hot, Long> {

    public static final String TABLENAME = "RESULT_BEAN_HOT";

    /**
     * Properties of entity ResultBean_hot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Director = new Property(0, String.class, "director", false, "DIRECTOR");
        public final static Property HorizontalImage = new Property(1, String.class, "horizontalImage", false, "HORIZONTAL_IMAGE");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property MovieId = new Property(3, Long.class, "movieId", true, "_id");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Score = new Property(5, double.class, "score", false, "SCORE");
        public final static Property Starring = new Property(6, String.class, "starring", false, "STARRING");
    }


    public ResultBean_hotDao(DaoConfig config) {
        super(config);
    }
    
    public ResultBean_hotDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT_BEAN_HOT\" (" + //
                "\"DIRECTOR\" TEXT," + // 0: director
                "\"HORIZONTAL_IMAGE\" TEXT," + // 1: horizontalImage
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: movieId
                "\"NAME\" TEXT," + // 4: name
                "\"SCORE\" REAL NOT NULL ," + // 5: score
                "\"STARRING\" TEXT);"); // 6: starring
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT_BEAN_HOT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResultBean_hot entity) {
        stmt.clearBindings();
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(1, director);
        }
 
        String horizontalImage = entity.getHorizontalImage();
        if (horizontalImage != null) {
            stmt.bindString(2, horizontalImage);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long movieId = entity.getMovieId();
        if (movieId != null) {
            stmt.bindLong(4, movieId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindDouble(6, entity.getScore());
 
        String starring = entity.getStarring();
        if (starring != null) {
            stmt.bindString(7, starring);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResultBean_hot entity) {
        stmt.clearBindings();
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(1, director);
        }
 
        String horizontalImage = entity.getHorizontalImage();
        if (horizontalImage != null) {
            stmt.bindString(2, horizontalImage);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long movieId = entity.getMovieId();
        if (movieId != null) {
            stmt.bindLong(4, movieId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindDouble(6, entity.getScore());
 
        String starring = entity.getStarring();
        if (starring != null) {
            stmt.bindString(7, starring);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public ResultBean_hot readEntity(Cursor cursor, int offset) {
        ResultBean_hot entity = new ResultBean_hot( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // director
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // horizontalImage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // movieId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getDouble(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // starring
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResultBean_hot entity, int offset) {
        entity.setDirector(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHorizontalImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMovieId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScore(cursor.getDouble(offset + 5));
        entity.setStarring(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResultBean_hot entity, long rowId) {
        entity.setMovieId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResultBean_hot entity) {
        if(entity != null) {
            return entity.getMovieId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResultBean_hot entity) {
        return entity.getMovieId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
