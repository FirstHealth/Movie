package com.bw.movie.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.convert.ListToStringConvert_MovieActorBean;
import com.bw.movie.convert.ListToStringConvert_MovieDirectorBean;
import com.bw.movie.convert.ListToStringConvert_ShortFilmListBean;
import java.util.List;

import com.bw.movie.bean.movieinfo.ResultBean_movieinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT_BEAN_MOVIEINFO".
*/
public class ResultBean_movieinfoDao extends AbstractDao<ResultBean_movieinfo, Long> {

    public static final String TABLENAME = "RESULT_BEAN_MOVIEINFO";

    /**
     * Properties of entity ResultBean_movieinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommentNum = new Property(0, int.class, "commentNum", false, "COMMENT_NUM");
        public final static Property Duration = new Property(1, String.class, "duration", false, "DURATION");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property MovieId = new Property(3, Long.class, "movieId", true, "_id");
        public final static Property MovieType = new Property(4, String.class, "movieType", false, "MOVIE_TYPE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property PlaceOrigin = new Property(6, String.class, "placeOrigin", false, "PLACE_ORIGIN");
        public final static Property ReleaseTime = new Property(7, long.class, "releaseTime", false, "RELEASE_TIME");
        public final static Property Score = new Property(8, double.class, "score", false, "SCORE");
        public final static Property Summary = new Property(9, String.class, "summary", false, "SUMMARY");
        public final static Property WhetherFollow = new Property(10, int.class, "whetherFollow", false, "WHETHER_FOLLOW");
        public final static Property MovieActor = new Property(11, String.class, "movieActor", false, "MOVIE_ACTOR");
        public final static Property MovieDirector = new Property(12, String.class, "movieDirector", false, "MOVIE_DIRECTOR");
        public final static Property ShortFilmList = new Property(13, String.class, "shortFilmList", false, "SHORT_FILM_LIST");
    }

    private final ListToStringConvert_MovieActorBean movieActorConverter = new ListToStringConvert_MovieActorBean();
    private final ListToStringConvert_MovieDirectorBean movieDirectorConverter = new ListToStringConvert_MovieDirectorBean();
    private final ListToStringConvert_ShortFilmListBean shortFilmListConverter = new ListToStringConvert_ShortFilmListBean();

    public ResultBean_movieinfoDao(DaoConfig config) {
        super(config);
    }
    
    public ResultBean_movieinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT_BEAN_MOVIEINFO\" (" + //
                "\"COMMENT_NUM\" INTEGER NOT NULL ," + // 0: commentNum
                "\"DURATION\" TEXT," + // 1: duration
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: movieId
                "\"MOVIE_TYPE\" TEXT," + // 4: movieType
                "\"NAME\" TEXT," + // 5: name
                "\"PLACE_ORIGIN\" TEXT," + // 6: placeOrigin
                "\"RELEASE_TIME\" INTEGER NOT NULL ," + // 7: releaseTime
                "\"SCORE\" REAL NOT NULL ," + // 8: score
                "\"SUMMARY\" TEXT," + // 9: summary
                "\"WHETHER_FOLLOW\" INTEGER NOT NULL ," + // 10: whetherFollow
                "\"MOVIE_ACTOR\" TEXT," + // 11: movieActor
                "\"MOVIE_DIRECTOR\" TEXT," + // 12: movieDirector
                "\"SHORT_FILM_LIST\" TEXT);"); // 13: shortFilmList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT_BEAN_MOVIEINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResultBean_movieinfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommentNum());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(2, duration);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long movieId = entity.getMovieId();
        if (movieId != null) {
            stmt.bindLong(4, movieId);
        }
 
        String movieType = entity.getMovieType();
        if (movieType != null) {
            stmt.bindString(5, movieType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String placeOrigin = entity.getPlaceOrigin();
        if (placeOrigin != null) {
            stmt.bindString(7, placeOrigin);
        }
        stmt.bindLong(8, entity.getReleaseTime());
        stmt.bindDouble(9, entity.getScore());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
        stmt.bindLong(11, entity.getWhetherFollow());
 
        List movieActor = entity.getMovieActor();
        if (movieActor != null) {
            stmt.bindString(12, movieActorConverter.convertToDatabaseValue(movieActor));
        }
 
        List movieDirector = entity.getMovieDirector();
        if (movieDirector != null) {
            stmt.bindString(13, movieDirectorConverter.convertToDatabaseValue(movieDirector));
        }
 
        List shortFilmList = entity.getShortFilmList();
        if (shortFilmList != null) {
            stmt.bindString(14, shortFilmListConverter.convertToDatabaseValue(shortFilmList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResultBean_movieinfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommentNum());
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(2, duration);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        Long movieId = entity.getMovieId();
        if (movieId != null) {
            stmt.bindLong(4, movieId);
        }
 
        String movieType = entity.getMovieType();
        if (movieType != null) {
            stmt.bindString(5, movieType);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String placeOrigin = entity.getPlaceOrigin();
        if (placeOrigin != null) {
            stmt.bindString(7, placeOrigin);
        }
        stmt.bindLong(8, entity.getReleaseTime());
        stmt.bindDouble(9, entity.getScore());
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
        stmt.bindLong(11, entity.getWhetherFollow());
 
        List movieActor = entity.getMovieActor();
        if (movieActor != null) {
            stmt.bindString(12, movieActorConverter.convertToDatabaseValue(movieActor));
        }
 
        List movieDirector = entity.getMovieDirector();
        if (movieDirector != null) {
            stmt.bindString(13, movieDirectorConverter.convertToDatabaseValue(movieDirector));
        }
 
        List shortFilmList = entity.getShortFilmList();
        if (shortFilmList != null) {
            stmt.bindString(14, shortFilmListConverter.convertToDatabaseValue(shortFilmList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public ResultBean_movieinfo readEntity(Cursor cursor, int offset) {
        ResultBean_movieinfo entity = new ResultBean_movieinfo( //
            cursor.getInt(offset + 0), // commentNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // duration
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // movieId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // movieType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // placeOrigin
            cursor.getLong(offset + 7), // releaseTime
            cursor.getDouble(offset + 8), // score
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // summary
            cursor.getInt(offset + 10), // whetherFollow
            cursor.isNull(offset + 11) ? null : movieActorConverter.convertToEntityProperty(cursor.getString(offset + 11)), // movieActor
            cursor.isNull(offset + 12) ? null : movieDirectorConverter.convertToEntityProperty(cursor.getString(offset + 12)), // movieDirector
            cursor.isNull(offset + 13) ? null : shortFilmListConverter.convertToEntityProperty(cursor.getString(offset + 13)) // shortFilmList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResultBean_movieinfo entity, int offset) {
        entity.setCommentNum(cursor.getInt(offset + 0));
        entity.setDuration(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMovieId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMovieType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlaceOrigin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReleaseTime(cursor.getLong(offset + 7));
        entity.setScore(cursor.getDouble(offset + 8));
        entity.setSummary(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWhetherFollow(cursor.getInt(offset + 10));
        entity.setMovieActor(cursor.isNull(offset + 11) ? null : movieActorConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setMovieDirector(cursor.isNull(offset + 12) ? null : movieDirectorConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setShortFilmList(cursor.isNull(offset + 13) ? null : shortFilmListConverter.convertToEntityProperty(cursor.getString(offset + 13)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResultBean_movieinfo entity, long rowId) {
        entity.setMovieId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResultBean_movieinfo entity) {
        if(entity != null) {
            return entity.getMovieId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResultBean_movieinfo entity) {
        return entity.getMovieId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
